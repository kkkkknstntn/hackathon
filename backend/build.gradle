plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'io.freefair.lombok' version '8.6'
}

group = 'org.ru'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    springBootVersion = '3.2.5'
    postgresqlVersion = '42.7.3'
    nimbusJoseJwtVersion = '9.37'
    awsSdkVersion = '2.25.53'
    minioVersion = '8.5.17'
    springdocVersion = '2.3.0'
    lombokVersion = '1.18.32'
    mapStructVersion = '1.5.5.Final'
    testContainersVersion = '1.19.7'
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("org.springframework.data:spring-data-redis:2.7.0")
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'redis.clients:jedis:4.2.3'
    implementation platform('org.springframework.cloud:spring-cloud-dependencies:2020.0.4')


    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    implementation "com.nimbusds:nimbus-jose-jwt:${nimbusJoseJwtVersion}"

    implementation "software.amazon.awssdk:s3:${awsSdkVersion}"
    implementation "io.minio:minio:${minioVersion}"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
    testImplementation "org.testcontainers:elasticsearch:${testContainersVersion}"

    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
}

tasks.named('compileJava') {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.deprecation = true
    options.incremental = true
}

// plugins.apply('checkstyle')
// plugins.apply('pmd')

// plugins.apply('jacoco')